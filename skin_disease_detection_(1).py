# -*- coding: utf-8 -*-
"""skin_Disease_Detection (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VJb10Wl823gLHhYMVksQ1-FWKw5BLc6B
"""

import os
import cv2 
import keras
import random
import sklearn
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
import matplotlib.pyplot as plt 
from keras.models import Sequential
from tensorflow.keras.utils import to_categorical 
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from keras.preprocessing.image import load_img
from sklearn.metrics import classification_report
from keras.preprocessing.image import img_to_array
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from google.colab import drive
print("Tensorflow version: ",tf.__version__)
print("Keras version: ",keras.__version__)
sklearn.show_versions()

from google.colab import drive

drive.mount('/content/drive')

"""# New section"""

def Img_preprocessing(n):
    
    #step-1: Convert rgb to grayscale
    gray_scale=cv2.cvtColor(n, cv2.COLOR_BGR2GRAY )
    
    
    #step-2: Resize the image-----------------
    img_size=200
    resized_img=cv2.resize(gray_scale,(img_size,img_size),3) 
    return resized_img.astype(np.uint8)
    
    equ = cv2.equalizeHist(resized_img)
    
    
    
    #blur=cv2.GaussianBlur(equ,(5,5),0)
    blur=cv2.medianBlur(equ,5)
    
    
    grad_x = cv2.Sobel(blur, cv2.CV_16S, 1, 0, ksize=3, scale=1, delta=0, borderType=cv2.BORDER_DEFAULT)
    grad_y = cv2.Sobel(blur, cv2.CV_16S, 0, 1, ksize=3, scale=1, delta=0, borderType=cv2.BORDER_DEFAULT)
    abs_grad_x = cv2.convertScaleAbs(grad_x)
    abs_grad_y = cv2.convertScaleAbs(grad_y)
    edges = cv2.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0)   #sobel derivative
    
    clean_data =edges
    return clean_data




dir1="/content/drive/MyDrive/Skin_Disease/Train"
catg=['actinic_keratosis','basal_cell_carcinoma','dermatofibroma','melanoma','nevus']

img_cube=[]
image_size=400

for i in catg: 
    path=os.path.join(dir1,i)
    label=catg.index(i)
    for j in os.listdir(path): 
        img_arr=cv2.imread(os.path.join(path,j)) 
        final_data=Img_preprocessing(img_arr)
        img_cube.append([final_data,label])
print("Length of your dataset: ",len(img_cube))
print("Whole image data in array format:\n",img_cube[10])

plt.imshow(img_cube[300][0],cmap='gray')
img_cube[3][1]

from sklearn.svm import SVC

feature=[]
target=[]
for i in img_cube:
    flat=i[0].flatten()
    feature.append(flat)
for i in img_cube:
    target.append(i[1])
    
len(feature),len(target)

x_train,x_test,y_train,y_test=train_test_split(feature,target,test_size=0.20,random_state=42)

clf1=SVC().fit(x_train,y_train)
y_pred=clf1.predict(x_test)

print("*-*"*100)

print(accuracy_score(y_test,y_pred)*100)
print("*-*"*100)

feature[10]

a=np.array(x_train)
a.shape
b = a.reshape(-1,200,200,1)
b.shape

data_aug=ImageDataGenerator(  rotation_range=40,
                              width_shift_range=0.2,
                              height_shift_range=0.2,
                              channel_shift_range=0.2,
                              zoom_range=0.2,
                              fill_mode="nearest",
                              horizontal_flip=True,
                              vertical_flip=True,      
                             )         
s=data_aug.flow(b,y_train, batch_size = 32)
s[0][0][0]

#for AK class
i=0
for batch in data_aug.flow_from_directory(directory="/content/drive/MyDrive/Skin_Disease/Train/",
                                          classes=['actinic_keratosis'],
                                          batch_size=32,
                                          target_size=(500,500),
                                          color_mode='rgb',
                                          save_to_dir=r'/content/drive/MyDrive/Skin_Disease/Train/actinic_keratosis',
                                          save_prefix='aug',
                                          save_format='png'):
    i += 1
    if i>10:
      break

#for BCC class
i=0
for batch in data_aug.flow_from_directory(directory="/content/drive/MyDrive/Skin_Disease/Train/",
                                          classes=['basal_cell_carcinoma'],
                                          batch_size=32,
                                          target_size=(500,500),
                                          color_mode='rgb',
                                          save_to_dir=r'/content/drive/MyDrive/Skin_Disease/Train/basal_cell_carcinoma',
                                          save_prefix='aug',
                                          save_format='png'):
    i += 1
    if i>19:
      break

#for derma class
i=0
for batch in data_aug.flow_from_directory(directory="/content/drive/MyDrive/Skin_Disease/Train/",
                                          classes=['dermatofibroma'],
                                          batch_size=32,
                                          target_size=(500,500),
                                          color_mode='rgb',
                                          save_to_dir=r'/content/drive/MyDrive/Skin_Disease/Train/dermatofibroma',
                                          save_prefix='aug',
                                          save_format='png'):
    i += 1
    if i>19:
      break

#for melanoma class
i=0
for batch in data_aug.flow_from_directory(directory="/content/drive/MyDrive/Skin_Disease/Train/",
                                          classes=['melanoma'],
                                          batch_size=32,
                                          target_size=(500,500),
                                          color_mode='rgb',
                                          save_to_dir=r'/content/drive/MyDrive/Skin_Disease/Train/melanoma',
                                          save_prefix='aug',
                                          save_format='png'):
    i += 1
    if i>10:
      break

#for nevus class
i=0
for batch in data_aug.flow_from_directory(directory="/content/drive/MyDrive/Skin_Disease/Train/",
                                          classes=['nevus'],
                                          batch_size=32,
                                          target_size=(500,500),
                                          color_mode='rgb',
                                          save_to_dir=r'/content/drive/MyDrive/Skin_Disease/Train/nevus',
                                          save_prefix='aug',
                                          save_format='png'):
    i += 1
    if i>10:
      break

dir1="/content/drive/MyDrive/Skin_Disease/Train/"
catg=['actinic_keratosis','basal_cell_carcinoma','dermatofibroma','melanoma','nevus']

img_cube3=[]

for i in catg: 
    path=os.path.join(dir1,i)
    label=catg.index(i)
    for j in os.listdir(path): 
        img_arr=cv2.imread(os.path.join(path,j)) 
        final_data=cv2.resize(img_arr,(100,100))
        img_cube3.append([final_data,label])
        
img_cube3[10]

feat3=[]
tar3=[]
for i,j in img_cube3:
    feat3.append(i)
    tar3.append(j)
x=np.array(feat3)
x=x/255.0 
y=np.array(tar3)
plt.imshow(x[500],cmap='gray')

x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.20)
x_train.shape

y_test.shape,y_train.shape

cnn2=Sequential()

#convolutional layer-1
cnn2.add(Conv2D(32, kernel_size=(3, 3), activation='relu',  padding='same'))
cnn2.add(MaxPooling2D(2,2))

#convolutional layer-2
cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu',  padding='same'))
cnn2.add(MaxPooling2D(2,2))

#convolutional layer-3
cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu',  padding='same'))
cnn2.add(MaxPooling2D(2,2))


#convolutional layer-4
cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu',  padding='same'))
cnn2.add(MaxPooling2D(2,2))


#flatten layer
cnn2.add(Flatten(input_shape=x_train.shape[1:] ))


cnn2.add(Dense(256,activation='relu'))

#densly connected layer
cnn2.add(Dense(128,activation='relu'))

#output layer
cnn2.add(Dense(5,activation='softmax'))


cnn2.compile(optimizer='Adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),
              metrics=['accuracy'])



history2=cnn2.fit(  x_train,
          y_train,
          verbose=1,
          epochs=100, 
          batch_size=32,
          validation_data=(x_test,y_test) )

score = cnn2.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

y_pred=[]
for i in range(len(x_test)):
        y_pred.append(cnn2.predict(x_test[i].reshape(1,100,100,3)))
        
len(y_test),len(y_pred)

y_pred[:10]

result=[]
for i in range(len(x_test)):
    result.append(np.argmax(y_pred[i],axis=1))

cnn2.summary()


y_pred2=result

print("*-*"*40)
print("Accuracy Found: ",accuracy_score(y_test,np.array(y_pred2)))
print("*-*"*40)
print("Confusion Matrix:\n",confusion_matrix(y_test,np.array(y_pred2))) 
print("*-*"*40)
print("Classification Report:\n",classification_report(y_test,np.array(y_pred2)))
print("*-*"*40)


plt.title('Loss Comparison',fontsize=20)
plt.plot(history2.history['loss'],)
plt.plot(history2.history['val_loss'])
plt.legend(['Training Loss','Validation Loss'])
plt.show()


plt.title('Accuracy comparison ',fontsize=20)
plt.plot(history2.history['accuracy'],)
plt.plot(history2.history['val_accuracy'])
plt.legend(['Training Acc','Validation Acc'])
plt.show()

from keras.models import save_model

cnn2.save("/content/drive/MyDrive/Skin_Disease/skin_disease.h5")

from keras.models import load_model

mymodel = load_model("/content/drive/MyDrive/Skin_Disease/skin_disease.h5")

mymodel.summary()

def prediction(result,model): 
    arr=cv2.resize(result,(100,100))
    y_prediction= mymodel.predict(arr.reshape(1,100,100,3))
    result=np.argmax(y_prediction,axis=1) 
    if result==0:
        print('It has a disease called Actinic Keratosis')
    elif result==1:
        print('It has a disease called BAsal cell Carcinoma')
    elif result==2:
        print('It has a disease called Dermatofibroma')
    elif result==3:
        print('It has a disease called Melanoma')
    elif result==4:
        print('It has a disease clalled Nevus')
        
prediction(x_test[],mymodel)

"""# New section"""